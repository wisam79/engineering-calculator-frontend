import { useState } from 'react'
import { Button } from '@/components/ui/button.jsx'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card.jsx'
import { Input } from '@/components/ui/input.jsx'
import { Label } from '@/components/ui/label.jsx'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select.jsx'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs.jsx'
import { Calculator, MapPin, Building, Hammer, FileText, Download, Map } from 'lucide-react'
import CoordinateTransform from './components/CoordinateTransform.jsx'
import { jsPDF } from 'jspdf'
import './App.css'

function App() {
  const [activeSection, setActiveSection] = useState('surveying')
  const [results, setResults] = useState({})
  const [loading, setLoading] = useState(false)

  // Surveying calculations
  const [coordinates, setCoordinates] = useState([{ x: '', y: '' }])
  const [slopeData, setSlopeData] = useState({ x1: '', y1: '', x2: '', y2: '' })
  
  // Structural calculations
  const [beamData, setBeamData] = useState({ length: '', load: '', support: 'simply-supported' })
  const [columnData, setColumnData] = useState({ height: '', load: '', diameter: '' })
  
  // Concrete calculations
  const [concreteData, setConcreteData] = useState({ length: '', width: '', height: '', type: 'slab' })
  const [steelData, setSteelData] = useState({ bars: '', diameter: '', length: '' })

  // PDF Export functionality
  const exportToPDF = () => {
    const doc = new jsPDF()
    
    // Set font
    doc.setFont('helvetica')
    doc.setFontSize(16)
    
    // Header
    doc.text('Engineering Calculator Report', 20, 20)
    doc.text('تقرير الحاسبة الهندسية', 20, 30)
    
    // Date
    const date = new Date().toLocaleDateString('ar-EG')
    doc.setFontSize(12)
    doc.text(`Date / التاريخ: ${date}`, 20, 50)
    
    // Results
    doc.text('Results / النتائج:', 20, 70)
    let yPosition = 80
    
    Object.entries(results).forEach(([key, value]) => {
      if (value && typeof value === 'string') {
        doc.text(value, 20, yPosition)
        yPosition += 10
      }
    })
    
    // Footer
    doc.text('Generated by All-in-One Engineering Calculator', 20, 280)
    doc.text('تم إنشاؤه بواسطة الحاسبة الهندسية الشاملة', 20, 290)
    
    // Save the PDF
    doc.save(`engineering-report-${Date.now()}.pdf`)
  }

  // Add coordinate point
  const addCoordinate = () => {
    setCoordinates([...coordinates, { x: '', y: '' }])
  }

  // Remove coordinate point
  const removeCoordinate = (index) => {
    if (coordinates.length > 1) {
      setCoordinates(coordinates.filter((_, i) => i !== index))
    }
  }

  // Update coordinate
  const updateCoordinate = (index, field, value) => {
    const newCoordinates = [...coordinates]
    newCoordinates[index][field] = value
    setCoordinates(newCoordinates)
  }

  // Calculate area using Shoelace formula
  const calculateArea = () => {
    setLoading(true)
    setTimeout(() => {
      const validCoords = coordinates.filter(coord => coord.x !== '' && coord.y !== '')
      if (validCoords.length < 3) {
        setResults({ ...results, area: 'يجب إدخال 3 نقاط على الأقل' })
        setLoading(false)
        return
      }

      let area = 0
      let perimeter = 0
      
      for (let i = 0; i < validCoords.length; i++) {
        const j = (i + 1) % validCoords.length
        const xi = parseFloat(validCoords[i].x)
        const yi = parseFloat(validCoords[i].y)
        const xj = parseFloat(validCoords[j].x)
        const yj = parseFloat(validCoords[j].y)
        
        area += xi * yj - xj * yi
        perimeter += Math.sqrt(Math.pow(xj - xi, 2) + Math.pow(yj - yi, 2))
      }
      
      area = Math.abs(area) / 2
      
      setResults({
        ...results,
        area: `المساحة: ${area.toFixed(2)} متر مربع`,
        perimeter: `المحيط: ${perimeter.toFixed(2)} متر`
      })
      setLoading(false)
    }, 1000)
  }

  // Calculate slope
  const calculateSlope = () => {
    setLoading(true)
    setTimeout(() => {
      const { x1, y1, x2, y2 } = slopeData
      if (!x1 || !y1 || !x2 || !y2) {
        setResults({ ...results, slope: 'يرجى إدخال جميع الإحداثيات' })
        setLoading(false)
        return
      }

      const deltaY = parseFloat(y2) - parseFloat(y1)
      const deltaX = parseFloat(x2) - parseFloat(x1)
      
      if (deltaX === 0) {
        setResults({ ...results, slope: 'الميل عمودي (غير محدد)' })
        setLoading(false)
        return
      }

      const slope = deltaY / deltaX
      const percentage = (slope * 100).toFixed(2)
      const angle = (Math.atan(slope) * 180 / Math.PI).toFixed(2)
      const ratio = deltaX !== 0 ? `1:${Math.abs(deltaX / deltaY).toFixed(2)}` : 'غير محدد'

      setResults({
        ...results,
        slope: `الميل: ${slope.toFixed(4)}`,
        slopePercentage: `النسبة المئوية: ${percentage}%`,
        slopeAngle: `الزاوية: ${angle}°`,
        slopeRatio: `النسبة: ${ratio}`
      })
      setLoading(false)
    }, 1000)
  }

  // Calculate beam
  const calculateBeam = () => {
    setLoading(true)
    setTimeout(() => {
      const { length, load } = beamData
      if (!length || !load) {
        setResults({ ...results, beam: 'يرجى إدخال جميع البيانات' })
        setLoading(false)
        return
      }

      const L = parseFloat(length)
      const P = parseFloat(load)
      
      // For simply supported beam with point load at center
      const maxMoment = (P * L) / 4
      const maxShear = P / 2
      const maxDeflection = (P * Math.pow(L, 3)) / (48 * 200000 * 1000) // Assuming E=200GPa, I=1000cm4

      setResults({
        ...results,
        beam: `العزم الأقصى: ${maxMoment.toFixed(2)} كيلو نيوتن.متر`,
        beamShear: `القص الأقصى: ${maxShear.toFixed(2)} كيلو نيوتن`,
        beamDeflection: `الانحراف الأقصى: ${maxDeflection.toFixed(2)} مم`
      })
      setLoading(false)
    }, 1000)
  }

  // Calculate concrete volume
  const calculateConcrete = () => {
    setLoading(true)
    setTimeout(() => {
      const { length, width, height } = concreteData
      if (!length || !width || !height) {
        setResults({ ...results, concrete: 'يرجى إدخال جميع الأبعاد' })
        setLoading(false)
        return
      }

      const volume = parseFloat(length) * parseFloat(width) * parseFloat(height)
      const cement = volume * 350 // kg per m3
      const sand = volume * 0.5 // m3
      const aggregate = volume * 0.8 // m3
      const water = volume * 175 // liters

      setResults({
        ...results,
        concrete: `حجم الخرسانة: ${volume.toFixed(2)} متر مكعب`,
        cement: `الأسمنت: ${cement.toFixed(0)} كيلوجرام`,
        sand: `الرمل: ${sand.toFixed(2)} متر مكعب`,
        aggregate: `الحصى: ${aggregate.toFixed(2)} متر مكعب`,
        water: `الماء: ${water.toFixed(0)} لتر`
      })
      setLoading(false)
    }, 1000)
  }

  // Calculate steel quantity
  const calculateSteel = () => {
    setLoading(true)
    setTimeout(() => {
      const { bars, diameter, length } = steelData
      if (!bars || !diameter || !length) {
        setResults({ ...results, steel: 'يرجى إدخال جميع البيانات' })
        setLoading(false)
        return
      }

      const totalLength = parseFloat(bars) * parseFloat(length)
      const barWeight = Math.pow(parseFloat(diameter), 2) * 0.00617 // kg/m
      const totalWeight = totalLength * barWeight

      setResults({
        ...results,
        steel: `الطول الكلي: ${totalLength.toFixed(2)} متر`,
        steelWeight: `الوزن الكلي: ${totalWeight.toFixed(2)} كيلوجرام`,
        steelTons: `الوزن بالطن: ${(totalWeight / 1000).toFixed(3)} طن`
      })
      setLoading(false)
    }, 1000)
  }

  return (
    <div className="calculator-container min-h-screen p-4">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <Card className="calculator-card mb-6">
          <CardHeader className="text-center">
            <CardTitle className="text-3xl font-bold text-gray-800 flex items-center justify-center gap-3">
              <Calculator className="h-8 w-8 text-blue-600" />
              الحاسبة الهندسية الشاملة
            </CardTitle>
            <CardDescription className="text-lg text-gray-600">
              أداة شاملة للحسابات الهندسية المدنية والمساحية
            </CardDescription>
            <div className="flex justify-center gap-2 mt-4">
              <Button onClick={exportToPDF} variant="outline" className="flex items-center gap-2">
                <Download className="h-4 w-4" />
                تصدير PDF
              </Button>
            </div>
          </CardHeader>
        </Card>

        {/* Main Navigation */}
        <Tabs value={activeSection} onValueChange={setActiveSection} className="w-full">
          <TabsList className="grid w-full grid-cols-3 mb-6">
            <TabsTrigger value="surveying" className="flex items-center gap-2">
              <MapPin className="h-4 w-4" />
              الحسابات المساحية
            </TabsTrigger>
            <TabsTrigger value="structural" className="flex items-center gap-2">
              <Building className="h-4 w-4" />
              الحسابات الإنشائية
            </TabsTrigger>
            <TabsTrigger value="concrete" className="flex items-center gap-2">
              <Hammer className="h-4 w-4" />
              حسابات الخرسانة
            </TabsTrigger>
          </TabsList>

          {/* Surveying Calculations */}
          <TabsContent value="surveying">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Area Calculator */}
              <Card className="calculator-card">
                <CardHeader>
                  <CardTitle>حساب المساحة والمحيط</CardTitle>
                  <CardDescription>حساب المساحة والمحيط باستخدام الإحداثيات</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  {coordinates.map((coord, index) => (
                    <div key={index} className="flex gap-2 items-center">
                      <Label className="w-16">النقطة {index + 1}:</Label>
                      <Input
                        placeholder="X"
                        value={coord.x}
                        onChange={(e) => updateCoordinate(index, 'x', e.target.value)}
                        className="input-field"
                      />
                      <Input
                        placeholder="Y"
                        value={coord.y}
                        onChange={(e) => updateCoordinate(index, 'y', e.target.value)}
                        className="input-field"
                      />
                      {coordinates.length > 1 && (
                        <Button
                          variant="destructive"
                          size="sm"
                          onClick={() => removeCoordinate(index)}
                        >
                          حذف
                        </Button>
                      )}
                    </div>
                  ))}
                  <div className="flex gap-2">
                    <Button onClick={addCoordinate} variant="outline">
                      إضافة نقطة
                    </Button>
                    <Button onClick={calculateArea} disabled={loading}>
                      {loading ? 'جاري الحساب...' : 'حساب المساحة'}
                    </Button>
                  </div>
                  {(results.area || results.perimeter) && (
                    <div className="result-display">
                      <p>{results.area}</p>
                      <p>{results.perimeter}</p>
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* Slope Calculator */}
              <Card className="calculator-card">
                <CardHeader>
                  <CardTitle>حساب الميل</CardTitle>
                  <CardDescription>حساب الميل بين نقطتين</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <Label>النقطة الأولى</Label>
                      <div className="flex gap-2 mt-1">
                        <Input
                          placeholder="X1"
                          value={slopeData.x1}
                          onChange={(e) => setSlopeData({...slopeData, x1: e.target.value})}
                          className="input-field"
                        />
                        <Input
                          placeholder="Y1"
                          value={slopeData.y1}
                          onChange={(e) => setSlopeData({...slopeData, y1: e.target.value})}
                          className="input-field"
                        />
                      </div>
                    </div>
                    <div>
                      <Label>النقطة الثانية</Label>
                      <div className="flex gap-2 mt-1">
                        <Input
                          placeholder="X2"
                          value={slopeData.x2}
                          onChange={(e) => setSlopeData({...slopeData, x2: e.target.value})}
                          className="input-field"
                        />
                        <Input
                          placeholder="Y2"
                          value={slopeData.y2}
                          onChange={(e) => setSlopeData({...slopeData, y2: e.target.value})}
                          className="input-field"
                        />
                      </div>
                    </div>
                  </div>
                  <Button onClick={calculateSlope} disabled={loading} className="w-full">
                    {loading ? 'جاري الحساب...' : 'حساب الميل'}
                  </Button>
                  {results.slope && (
                    <div className="result-display">
                      <p>{results.slope}</p>
                      <p>{results.slopePercentage}</p>
                      <p>{results.slopeAngle}</p>
                      <p>{results.slopeRatio}</p>
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* Coordinate Transformation */}
              <div className="lg:col-span-2">
                <CoordinateTransform />
              </div>
            </div>
          </TabsContent>

          {/* Structural Calculations */}
          <TabsContent value="structural">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Beam Calculator */}
              <Card className="calculator-card">
                <CardHeader>
                  <CardTitle>تصميم الكمرات</CardTitle>
                  <CardDescription>حساب العزوم والقص للكمرات</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="beam-length">طول الكمرة (متر)</Label>
                    <Input
                      id="beam-length"
                      placeholder="أدخل طول الكمرة"
                      value={beamData.length}
                      onChange={(e) => setBeamData({...beamData, length: e.target.value})}
                      className="input-field"
                    />
                  </div>
                  <div>
                    <Label htmlFor="beam-load">الحمل (كيلو نيوتن)</Label>
                    <Input
                      id="beam-load"
                      placeholder="أدخل الحمل"
                      value={beamData.load}
                      onChange={(e) => setBeamData({...beamData, load: e.target.value})}
                      className="input-field"
                    />
                  </div>
                  <div>
                    <Label htmlFor="beam-support">نوع الإسناد</Label>
                    <Select value={beamData.support} onValueChange={(value) => setBeamData({...beamData, support: value})}>
                      <SelectTrigger>
                        <SelectValue placeholder="اختر نوع الإسناد" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="simply-supported">مسنود بسيط</SelectItem>
                        <SelectItem value="fixed">مثبت</SelectItem>
                        <SelectItem value="cantilever">كابولي</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <Button onClick={calculateBeam} disabled={loading} className="w-full">
                    {loading ? 'جاري الحساب...' : 'حساب الكمرة'}
                  </Button>
                  {results.beam && (
                    <div className="result-display">
                      <p>{results.beam}</p>
                      <p>{results.beamShear}</p>
                      <p>{results.beamDeflection}</p>
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* Column Calculator */}
              <Card className="calculator-card">
                <CardHeader>
                  <CardTitle>تصميم الأعمدة</CardTitle>
                  <CardDescription>حساب الحمل المحوري للأعمدة</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="column-height">ارتفاع العمود (متر)</Label>
                    <Input
                      id="column-height"
                      placeholder="أدخل ارتفاع العمود"
                      value={columnData.height}
                      onChange={(e) => setColumnData({...columnData, height: e.target.value})}
                      className="input-field"
                    />
                  </div>
                  <div>
                    <Label htmlFor="column-load">الحمل (كيلو نيوتن)</Label>
                    <Input
                      id="column-load"
                      placeholder="أدخل الحمل"
                      value={columnData.load}
                      onChange={(e) => setColumnData({...columnData, load: e.target.value})}
                      className="input-field"
                    />
                  </div>
                  <div>
                    <Label htmlFor="column-diameter">قطر العمود (سم)</Label>
                    <Input
                      id="column-diameter"
                      placeholder="أدخل قطر العمود"
                      value={columnData.diameter}
                      onChange={(e) => setColumnData({...columnData, diameter: e.target.value})}
                      className="input-field"
                    />
                  </div>
                  <Button disabled className="w-full">
                    قريباً - حساب العمود
                  </Button>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Concrete Calculations */}
          <TabsContent value="concrete">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Concrete Volume Calculator */}
              <Card className="calculator-card">
                <CardHeader>
                  <CardTitle>حساب كمية الخرسانة</CardTitle>
                  <CardDescription>حساب حجم الخرسانة والمواد المطلوبة</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="concrete-type">نوع العنصر</Label>
                    <Select value={concreteData.type} onValueChange={(value) => setConcreteData({...concreteData, type: value})}>
                      <SelectTrigger>
                        <SelectValue placeholder="اختر نوع العنصر" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="slab">بلاطة</SelectItem>
                        <SelectItem value="beam">كمرة</SelectItem>
                        <SelectItem value="column">عمود</SelectItem>
                        <SelectItem value="footing">قاعدة</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label htmlFor="concrete-length">الطول (متر)</Label>
                    <Input
                      id="concrete-length"
                      placeholder="أدخل الطول"
                      value={concreteData.length}
                      onChange={(e) => setConcreteData({...concreteData, length: e.target.value})}
                      className="input-field"
                    />
                  </div>
                  <div>
                    <Label htmlFor="concrete-width">العرض (متر)</Label>
                    <Input
                      id="concrete-width"
                      placeholder="أدخل العرض"
                      value={concreteData.width}
                      onChange={(e) => setConcreteData({...concreteData, width: e.target.value})}
                      className="input-field"
                    />
                  </div>
                  <div>
                    <Label htmlFor="concrete-height">الارتفاع/السمك (متر)</Label>
                    <Input
                      id="concrete-height"
                      placeholder="أدخل الارتفاع"
                      value={concreteData.height}
                      onChange={(e) => setConcreteData({...concreteData, height: e.target.value})}
                      className="input-field"
                    />
                  </div>
                  <Button onClick={calculateConcrete} disabled={loading} className="w-full">
                    {loading ? 'جاري الحساب...' : 'حساب الخرسانة'}
                  </Button>
                  {results.concrete && (
                    <div className="result-display">
                      <p>{results.concrete}</p>
                      <p>{results.cement}</p>
                      <p>{results.sand}</p>
                      <p>{results.aggregate}</p>
                      <p>{results.water}</p>
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* Steel Calculator */}
              <Card className="calculator-card">
                <CardHeader>
                  <CardTitle>حساب كمية الحديد</CardTitle>
                  <CardDescription>حساب وزن وكمية حديد التسليح</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="steel-bars">عدد القضبان</Label>
                    <Input
                      id="steel-bars"
                      placeholder="أدخل عدد القضبان"
                      value={steelData.bars}
                      onChange={(e) => setSteelData({...steelData, bars: e.target.value})}
                      className="input-field"
                    />
                  </div>
                  <div>
                    <Label htmlFor="steel-diameter">قطر القضيب (مم)</Label>
                    <Input
                      id="steel-diameter"
                      placeholder="أدخل قطر القضيب"
                      value={steelData.diameter}
                      onChange={(e) => setSteelData({...steelData, diameter: e.target.value})}
                      className="input-field"
                    />
                  </div>
                  <div>
                    <Label htmlFor="steel-length">طول القضيب (متر)</Label>
                    <Input
                      id="steel-length"
                      placeholder="أدخل طول القضيب"
                      value={steelData.length}
                      onChange={(e) => setSteelData({...steelData, length: e.target.value})}
                      className="input-field"
                    />
                  </div>
                  <Button onClick={calculateSteel} disabled={loading} className="w-full">
                    {loading ? 'جاري الحساب...' : 'حساب الحديد'}
                  </Button>
                  {results.steel && (
                    <div className="result-display">
                      <p>{results.steel}</p>
                      <p>{results.steelWeight}</p>
                      <p>{results.steelTons}</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>

        {/* Footer */}
        <Card className="calculator-card mt-6">
          <CardContent className="text-center py-4">
            <p className="text-gray-600">
              الحاسبة الهندسية الشاملة - أداة مساعدة للمهندسين المدنيين والمساحين
            </p>
            <p className="text-sm text-gray-500 mt-2">
              تم التطوير باستخدام React.js و Tailwind CSS
            </p>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

export default App

